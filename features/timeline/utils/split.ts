/**
 * Effect split utilities
 * Ported from omniclip split logic
 *
 * Handles splitting effects at arbitrary positions
 */

import { Effect } from '@/types/effects'

/**
 * Split an effect at a specific timeline position
 * Returns two effects: left (original ID) and right (new ID)
 *
 * @param effect Effect to split
 * @param splitTimecode Timeline position in ms where to split
 * @returns Tuple of [leftEffect, rightEffect] or null if invalid split
 */
export function splitEffect(
  effect: Effect,
  splitTimecode: number
): [Effect, Effect] | null {
  // Validate split position is within effect bounds
  const effectStart = effect.start_at_position
  const effectEnd = effect.start_at_position + effect.duration

  if (splitTimecode <= effectStart || splitTimecode >= effectEnd) {
    console.warn('Split position outside effect bounds')
    return null
  }

  // Calculate relative position within effect
  const relativePosition = splitTimecode - effect.start_at_position

  // Enforce minimum duration for both parts (100ms per omniclip)
  if (relativePosition < 100 || (effect.duration - relativePosition) < 100) {
    console.warn('Split would create effect shorter than minimum duration (100ms)')
    return null
  }

  // Left effect (keeps original ID)
  const leftEffect: Effect = {
    ...effect,
    duration: relativePosition,
    end: effect.start + relativePosition,
  }

  // Right effect (needs new ID - will be generated by database)
  const rightEffect: Effect = {
    ...effect,
    id: '', // Will be assigned by createEffect
    start_at_position: splitTimecode,
    duration: effect.duration - relativePosition,
    start: effect.start + relativePosition,
    // end stays the same (original end point)
  }

  console.log(`Split effect ${effect.id} at ${splitTimecode}ms:`)
  console.log(`  Left: ${leftEffect.duration}ms (${leftEffect.start}-${leftEffect.end})`)
  console.log(`  Right: ${rightEffect.duration}ms (${rightEffect.start}-${rightEffect.end})`)

  return [leftEffect, rightEffect]
}

/**
 * Split multiple effects at a specific timeline position
 * Useful for splitting all effects under playhead
 *
 * @param effects All effects to consider
 * @param splitTimecode Timeline position in ms
 * @returns Object with effects to update and effects to create
 */
export function splitEffects(
  effects: Effect[],
  splitTimecode: number
): {
  toUpdate: Effect[]
  toCreate: Omit<Effect, 'id' | 'created_at' | 'updated_at'>[]
} {
  const toUpdate: Effect[] = []
  const toCreate: Omit<Effect, 'id' | 'created_at' | 'updated_at'>[] = []

  for (const effect of effects) {
    const result = splitEffect(effect, splitTimecode)
    if (result) {
      const [left, right] = result
      toUpdate.push(left)

      // Remove ID fields for creation
      const { id, created_at, updated_at, ...rightData } = right
      toCreate.push(rightData)
    }
  }

  return { toUpdate, toCreate }
}

/**
 * Check if an effect can be split at a position
 *
 * @param effect Effect to check
 * @param splitTimecode Timeline position in ms
 * @returns True if split is valid
 */
export function canSplitEffect(
  effect: Effect,
  splitTimecode: number
): boolean {
  const effectStart = effect.start_at_position
  const effectEnd = effect.start_at_position + effect.duration
  const relativePosition = splitTimecode - effect.start_at_position

  return (
    splitTimecode > effectStart &&
    splitTimecode < effectEnd &&
    relativePosition >= 100 &&
    (effect.duration - relativePosition) >= 100
  )
}
